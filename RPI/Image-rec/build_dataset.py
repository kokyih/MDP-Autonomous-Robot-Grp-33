import iou as iou_fn
import config
from bs4 import BeautifulSoup
from imutils import paths
import cv2
import os

# loop over output positive and negative directories
for dirPath in (config.POSITVE_PATH, config.NEGATIVE_PATH):
	# create if output directory does not exist yet
	if not os.path.exists(dirPath):
		os.makedirs(dirPath)

# grab all image paths in the input images directory
imagePaths = list(paths.list_images(config.ORIG_IMAGES))

# initialize total number of positive and negative images currently in disk
totalPositive = 0
totalNegative = 0

# loop over image paths
for (i, imagePath) in enumerate(imagePaths):
	# progress report
	print("Processing image {}/{}...".format(i + 1, len(imagePaths)))

	# extract filename from file path and derive path to XML annotation file
	filename = imagePath.split(os.path.sep)[-1]
	filename = filename[:filename.rfind(".")]
	annotPath = os.path.sep.join([config.ORIG_ANNOTS, "{}.xml".format(filename)])

	# initialize list of ground-truth bounding boxes
	contents = open(annotPath).read()
	soup = BeautifulSoup(contents, "html.parser")
	gtBoxes = []

	# extract image dimensions
	w = int(soup.find("width").string)
	h = int(soup.find("height").string)

	# loop over all 'object' elements
	for obj in soup.find_all("object"):
		# extract label and bounding box coordinates
		label = obj.find("name").string
		xMin = int(obj.find("xmin").string)
		yMin = int(obj.find("ymin").string)
		xMax = int(obj.find("xmax").string)
		yMax = int(obj.find("ymax").string)

		# truncate any bounding box coordinates that fall outside image boundary
		xMin = max(0, xMin)
		yMin = max(0, yMin)
		xMax = min(w, xMax)
		yMax = min(h, yMax)

		# update ground-truth bounding boxes list
		gtBoxes.append((xMin, yMin, xMax, yMax))

	# load input image from disk
	image = cv2.imread(imagePath)

	# run selective search
	ss = cv2.ximgproc.segmentation.createSelectiveSearchSegmentation()
	ss.setBaseImage(image)
	ss.switchToSelectiveSearchFast()
	rects = ss.process()
	proposedRects= []

	# loop over the rectangles generated by selective search
	for (x, y, w, h) in rects:
		proposedRects.append((x, y, x + w, y + h))

	# to count number of positive and negative ROIs saved
	positiveROIs = 0
	negativeROIs = 0

	# loop over max number of region proposals
	for proposedRect in proposedRects[:config.MAX_PROPOSALS]:
		# unpack the proposed rectangle bounding box
		(propStartX, propStartY, propEndX, propEndY) = proposedRect

		# loop over the ground-truth bounding boxes
		for gtBox in gtBoxes:
			iou = iou_fn.compute_iou(gtBox, proposedRect)
			(gtStartX, gtStartY, gtEndX, gtEndY) = gtBox

			roi = None
			outputPath = None

			if iou > 0.7 and positiveROIs <= config.MAX_POSITIVE:
				# extract ROI and derive positive output path
				roi = image[propStartY:propEndY, propStartX:propEndX]
				filename = "{}.png".format(totalPositive)
				outputPath = os.path.sep.join([config.POSITVE_PATH, filename])

				# increment positive counters
				positiveROIs += 1
				totalPositive += 1

			fullOverlap = propStartX >= gtStartX
			fullOverlap = fullOverlap and propStartY >= gtStartY
			fullOverlap = fullOverlap and propEndX <= gtEndX
			fullOverlap = fullOverlap and propEndY <= gtEndY

			if not fullOverlap and iou < 0.05 and \
				negativeROIs <= config.MAX_NEGATIVE:
				# extract ROI and derive negative output path
				roi = image[propStartY:propEndY, propStartX:propEndX]
				filename = "{}.png".format(totalNegative)
				outputPath = os.path.sep.join([config.NEGATIVE_PATH,
					filename])

				# increment negative counters
				negativeROIs += 1
				totalNegative += 1

			if roi is not None and outputPath is not None:
				# resize the ROI to the input dimensions of the CNN
				roi = cv2.resize(roi, config.INPUT_DIMS,
					interpolation=cv2.INTER_CUBIC)
				cv2.imwrite(outputPath, roi)