import iou as iou_fn
import config
from bs4 import BeautifulSoup
from imutils import paths
import cv2
import os
import pandas as pd

# grab all image paths in the input images directory
imgPaths = list(paths.list_images(config.ORIGINAL_IMAGES))

# initialize total number of positive and negative images currently in disk
totalPositive = 1000
totalNegative = 5700

# loop over image paths
for (i, imgPath) in enumerate(imgPaths):
	# progress report
	print("Processing image {}/{}...".format(i + 1, len(imgPaths)))

	# extract filename from file path and derive path to  CSV annotation file
	filename = imgPath.split(os.path.sep)[-1]
	annotationPath = pd.read_csv(config.ORIGINAL_BASE_PATH+"_labels.csv")
	boundBoxes = []
	filename2 = annotationPath['filename'] == filename
	annotationPath = annotationPath[filename2]
	xMin = int(annotationPath['xmin'].values[0])
	yMin = int(annotationPath['ymin'].values[0])
	xMax = int(annotationPath['xmax'].values[0])
	yMax = int(annotationPath['ymax'].values[0])
	w = int(annotationPath['width'].values[0])
	h = int(annotationPath['height'].values[0])
	image_class = str(annotationPath['class'].values[0])
	# outside the boundaries of the image
	xMin = max(0, xMin)
	yMin = max(0, yMin)
	xMax = min(w, xMax)
	yMax = min(h, yMax)

	# update ground-truth bounding boxes list
	boundBoxes.append((xMin, yMin, xMax, yMax))

	# load input image from disk
	image = cv2.imread(imgPath)

	# run selective search
	selectiveSearch = cv2.ximgproc.segmentation.createSelectiveSearchSegmentation()
	selectiveSearch.setBaseImage(image)
	selectiveSearch.switchToSelectiveSearchFast()
	rects = selectiveSearch.process()
	proposedRects= []

	# loop over the rectangles generated by selective search
	for (x, y, w, h) in rects:
		proposedRects.append((x, y, x + w, y + h))

	# to count number of positive and negative region of interests saved
	positiveROIs = 0
	negativeROIs = 0

	# loop over max number of region proposals
	for proposedRect in proposedRects[:config.MAX_PROPOSALS_NO]:
		# unpack the proposed rectangle bounding box
		(proposedStartX, proposedStartY, proposedEndX, proposedEndY) = proposedRect

		# loop over the ground-truth bounding boxes
		for boundBox in boundBoxes:
			iou = iou_fn.calculate_iou(boundBox, proposedRect)
			(boundStartX, boundStartY, boundEndX, boundEndY) = boundBox

			roi = None
			outputPath = None

			if iou > 0.7 and positiveROIs <= config.MAX_POSITIVE_NO:
				# extract ROI and derive positive output path
				roi = image[proposedStartY:proposedEndY, proposedStartX:proposedEndX]
				filename = "{}.png".format(totalPositive)
				outputPath = os.path.sep.join([config.POSITVE_PATH, filename])

				# increment positive counters
				positiveROIs += 1
				totalPositive += 1

			fullOverlap = proposedStartX >= boundStartX
			fullOverlap = fullOverlap and proposedStartY >= boundStartY
			fullOverlap = fullOverlap and proposedEndX <= boundEndX
			fullOverlap = fullOverlap and proposedEndY <= boundEndY

			if not fullOverlap and iou < 0.05 and \
				negativeROIs <= config.MAX_NEGATIVE_NO:
				# extract ROI and derive negative output path
				roi = image[proposedStartY:proposedEndY, proposedStartX:proposedEndX]
				filename = "{}.png".format(totalNegative)
				outputPath = os.path.sep.join([config.NEGATIVE_PATH,
					filename])

				# increment negative counters
				negativeROIs += 1
				totalNegative += 1

			if roi is not None and outputPath is not None:
				# resize the ROI to the input dimensions of the CNN
				roi = cv2.resize(roi, config.INPUT_DIMENSIONS,
					interpolation=cv2.INTER_CUBIC)
				cv2.imwrite(outputPath, roi)